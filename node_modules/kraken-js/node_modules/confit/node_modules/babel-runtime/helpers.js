"use strict";

var _core = require("babel-runtime/core-js")["default"];

var helpers = exports["default"] = {};
exports.__esModule = true;

helpers.inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) subClass.__proto__ = superClass;
};

helpers.defaults = function (obj, defaults) {
  var keys = _core.Object.getOwnPropertyNames(defaults);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];

    var value = _core.Object.getOwnPropertyDescriptor(defaults, key);

    if (value && value.configurable && obj[key] === undefined) {
      Object.defineProperty(obj, key, value);
    }
  }

  return obj;
};

helpers.createClass = (function () {
  function defineProperties(target, props) {
    for (var key in props) {
      var prop = props[key];
      prop.configurable = true;
      if (prop.value) prop.writable = true;
    }

    Object.defineProperties(target, props);
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
})();

helpers.applyConstructor = function (Constructor, args) {
  var instance = Object.create(Constructor.prototype);
  var result = Constructor.apply(instance, args);
  return result != null && (typeof result == "object" || typeof result == "function") ? result : instance;
};

helpers.taggedTemplateLiteral = function (strings, raw) {
  return _core.Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: _core.Object.freeze(raw)
    }
  }));
};

helpers.taggedTemplateLiteralLoose = function (strings, raw) {
  strings.raw = raw;
  return strings;
};

helpers.interopRequire = function (obj) {
  return obj && obj.__esModule ? obj["default"] : obj;
};

helpers.toArray = function (arr) {
  return Array.isArray(arr) ? arr : _core.Array.from(arr);
};

helpers.toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return _core.Array.from(arr);
  }
};

helpers.slicedToArray = function (arr, i) {
  if (Array.isArray(arr)) {
    return arr;
  } else if (_core.$for.isIterable(Object(arr))) {
    var _arr = [];

    for (var _iterator = _core.$for.getIterator(arr), _step; !(_step = _iterator.next()).done;) {
      _arr.push(_step.value);

      if (i && _arr.length === i) break;
    }

    return _arr;
  } else {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }
};

helpers.objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

helpers.hasOwn = Object.prototype.hasOwnProperty;
helpers.slice = Array.prototype.slice;
helpers.bind = Function.prototype.bind;

helpers.defineProperty = function (obj, key, value) {
  return Object.defineProperty(obj, key, {
    value: value,
    enumerable: true,
    configurable: true,
    writable: true
  });
};

helpers.asyncToGenerator = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _core.Promise(function (resolve, reject) {
      var callNext = step.bind(null, "next");
      var callThrow = step.bind(null, "throw");

      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          _core.Promise.resolve(value).then(callNext, callThrow);
        }
      }

      callNext();
    });
  };
};

helpers.interopRequireWildcard = function (obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
};

helpers._typeof = function (obj) {
  return obj && obj.constructor === _core.Symbol ? "symbol" : typeof obj;
};

helpers._extends = _core.Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

helpers.get = function get(_x, _x2, _x3) {
  var _again = true;

  _function: while (_again) {
    _again = false;
    var object = _x,
        property = _x2,
        receiver = _x3;
    desc = parent = getter = undefined;

    var desc = _core.Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = _core.Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        _x = parent;
        _x2 = property;
        _x3 = receiver;
        _again = true;
        continue _function;
      }
    } else if ("value" in desc && desc.writable) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  }
};

helpers.set = function set(_x, _x2, _x3, _x4) {
  var _again = true;

  _function: while (_again) {
    _again = false;
    var object = _x,
        property = _x2,
        value = _x3,
        receiver = _x4;
    desc = parent = setter = undefined;

    var desc = _core.Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = _core.Object.getPrototypeOf(object);

      if (parent !== null) {
        _x = parent;
        _x2 = property;
        _x3 = value;
        _x4 = receiver;
        _again = true;
        continue _function;
      }
    } else if ("value" in desc && desc.writable) {
      return desc.value = value;
    } else {
      var setter = desc.set;

      if (setter !== undefined) {
        return setter.call(receiver, value);
      }
    }
  }
};

helpers.classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

helpers.objectDestructuringEmpty = function (obj) {
  if (obj == null) throw new TypeError("Cannot destructure undefined");
};

helpers.temporalUndefined = {};

helpers.temporalAssertDefined = function (val, name, undef) {
  if (val === undef) {
    throw new ReferenceError(name + " is not defined - temporal dead zone");
  }

  return true;
};

helpers.selfGlobal = typeof global === "undefined" ? self : global;